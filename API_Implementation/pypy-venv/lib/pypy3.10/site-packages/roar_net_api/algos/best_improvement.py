import logging
import math
from time import perf_counter
from ..api.custom_logger import get_metric_logger
from ..api.Operations import *


def best_improvement(problem: Problem, current_solution: Solution, budget: float) -> Solution:
    logger = get_metric_logger()

    start = perf_counter()
    iteration = 0
    start_time = perf_counter()

    best_solution = copy_solution(current_solution)
    best_objective = objective_value(best_solution)

    while perf_counter() - start < budget:
        iteration += 1
        neighbourhood: Neighbourhood = local_neighbourhood(problem)
        best_incr = 0
        best_move = None

        for move in moves(neighbourhood, current_solution):
            delta = objective_value_increment(move, current_solution)
            if delta < best_incr:
                best_incr = delta
                best_move = move

        if best_move is None:
            break

        current_solution = apply(best_move, current_solution)
        current_objective = objective_value(current_solution)

        # Log to CSV
        time = perf_counter() - start_time
        logger.log_algo_metric(iteration, current_objective, best_objective, time)
        if best_move is not None:
            apply(best_move, current_solution)
        else:
            break
    return best_solution