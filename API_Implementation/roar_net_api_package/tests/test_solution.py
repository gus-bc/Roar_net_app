import unittest
from collections import defaultdict
from unittest.mock import patch
from copy import deepcopy
import random
from unittest.mock import MagicMock
from problem_models import graph_colouring
from problem_models.graph_colouring import Problem, Solution, Move, Move_type
from roar_net_api.api.Operations import apply, construction_neighbourhood, destruction_neighbourhood, random_move, local_neighbourhood, random_moves_without_replacement

def get_partial_solution(problem: Problem):
    solution = problem.empty_solution()
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=1))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=2))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=2, new_colour=1))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=3, new_colour=3))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=4, new_colour=2))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=5, new_colour=3))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=6, new_colour=1))
    return solution

def get_complete_solution(problem: Problem):
    solution = problem.empty_solution()
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=1))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=2))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=2, new_colour=1))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=3, new_colour=3))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=4, new_colour=2))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=5, new_colour=3))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=6, new_colour=1))
    solution = solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=7, new_colour=3))
    return solution

def get_solution_with_hole_in_middle(problem: Problem):
    solution = problem.empty_solution()

    solution.colour_classes = {1: {0, 2, 6}, 2: set(), 3: {1, 3, 4, 5, 7}}
    solution.conflicts = [
        [[0, set()], [1, {2}], [0, set()], [2, {1, 7}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]],
        [[0, set()], [2, {0, 2}], [0, set()], [1, {4}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]],
        [[0, set()], [1, {0}], [0, set()], [2, {1, 3}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]],
        [[0, set()], [1, {2}], [0, set()], [2, {4, 7}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]],
        [[0, set()], [1, {6}], [0, set()], [2, {1, 3}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]],
        [[0, set()], [1, {6}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]],
        [[0, set()], [0, set()], [0, set()], [3, {4, 5, 7}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]],
        [[0, set()], [2, {0, 6}], [0, set()], [1, {3}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]]]

    conflicts = defaultdict(lambda: defaultdict(lambda: [0, set()]))

    # Convert from the list-of-lists into the defaultdict
    for vertex, color_list in enumerate(solution.conflicts):
        for color_class, (count, conflict_set) in enumerate(color_list):
            if count != 0 or conflict_set:
                conflicts[vertex][color_class] = [count, set(conflict_set)]

    solution.conflicts = conflicts
    solution.vertex_colours = {0: 1, 1: 3, 2: 1, 3: 3, 4: 3, 5: 3, 6: 1, 7: 3}

    return solution

def get_real_solution(problem: Problem):
    solution = problem.empty_solution()

    solution.problem.adjacency_list = {0: {1, 3, 8, 10, 23, 25, 30, 32}, 1: {0, 2, 7, 9, 22, 24, 29, 31}, 2: {1, 5, 8, 12, 23, 27, 30, 34}, 3: {0, 4, 7, 11, 22, 26, 29, 33}, 4: {3, 6, 10, 13, 25, 28, 32, 35}, 5: {2, 6, 9, 13, 24, 28, 31, 35}, 6: {4, 5, 11, 12, 26, 27, 33, 34}, 7: {1, 3, 15, 17, 23, 25, 37, 39}, 8: {0, 2, 14, 16, 22, 24, 36, 38}, 9: {1, 5, 15, 19, 23, 27, 37, 41}, 10: {0, 4, 14, 18, 22, 26, 36, 40}, 11: {3, 6, 17, 20, 25, 28, 39, 42}, 12: {2, 6, 16, 20, 24, 28, 38, 42}, 13: {4, 5, 18, 19, 26, 27, 40, 41}, 14: {8, 10, 21, 30, 32, 43}, 15: {7, 9, 21, 29, 31, 43}, 16: {8, 12, 21, 30, 34, 43}, 17: {7, 11, 21, 29, 33, 43}, 18: {10, 13, 21, 32, 35, 43}, 19: {9, 13, 21, 31, 35, 43}, 20: {11, 12, 21, 33, 34, 43}, 21: {14, 15, 16, 17, 18, 19, 20, 36, 37, 38, 39, 40, 41, 42}, 22: {1, 3, 8, 10, 45, 47, 52, 54}, 23: {0, 2, 7, 9, 44, 46, 51, 53}, 24: {1, 5, 8, 12, 45, 49, 52, 56}, 25: {0, 4, 7, 11, 44, 48, 51, 55}, 26: {3, 6, 10, 13, 47, 50, 54, 57}, 27: {2, 6, 9, 13, 46, 50, 53, 57}, 28: {4, 5, 11, 12, 48, 49, 55, 56}, 29: {1, 3, 15, 17, 45, 47, 59, 61}, 30: {0, 2, 14, 16, 44, 46, 58, 60}, 31: {1, 5, 15, 19, 45, 49, 59, 63}, 32: {0, 4, 14, 18, 44, 48, 58, 62}, 33: {3, 6, 17, 20, 47, 50, 61, 64}, 34: {2, 6, 16, 20, 46, 50, 60, 64}, 35: {4, 5, 18, 19, 48, 49, 62, 63}, 36: {8, 10, 21, 52, 54, 65}, 37: {7, 9, 21, 51, 53, 65}, 38: {8, 12, 21, 52, 56, 65}, 39: {7, 11, 21, 51, 55, 65}, 40: {10, 13, 21, 54, 57, 65}, 41: {9, 13, 21, 53, 57, 65}, 42: {11, 12, 21, 55, 56, 65}, 43: {14, 15, 16, 17, 18, 19, 20, 58, 59, 60, 61, 62, 63, 64}, 44: {23, 25, 30, 32, 66}, 45: {22, 24, 29, 31, 66}, 46: {23, 27, 30, 34, 66}, 47: {22, 26, 29, 33, 66}, 48: {25, 28, 32, 35, 66}, 49: {24, 28, 31, 35, 66}, 50: {26, 27, 33, 34, 66}, 51: {23, 25, 37, 39, 66}, 52: {22, 24, 36, 38, 66}, 53: {23, 27, 37, 41, 66}, 54: {22, 26, 36, 40, 66}, 55: {25, 28, 39, 42, 66}, 56: {24, 28, 38, 42, 66}, 57: {26, 27, 40, 41, 66}, 58: {30, 32, 43, 66}, 59: {29, 31, 43, 66}, 60: {30, 34, 43, 66}, 61: {29, 33, 43, 66}, 62: {32, 35, 43, 66}, 63: {31, 35, 43, 66}, 64: {33, 34, 43, 66}, 65: {36, 37, 38, 39, 40, 41, 42, 66}, 66: {44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}}
    solution.problem.adjacency_matrix = [[0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]]
    solution.problem.vertex_count = 67

    solution.colour_classes = {1: {7, 10, 16, 19, 27, 28, 29, 32, 33, 51, 52, 54, 60, 63, 65}, 2: {0, 2, 4, 14, 15, 17, 18, 20, 22, 24, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 50, 58, 59, 61, 62, 64}, 3: {3, 8, 9, 12, 13, 21, 30, 31, 34, 35, 43, 47, 53, 55, 56, 57}, 4: {1, 5, 23, 25, 26, 66}, 5: {6, 45, 49}, 6: {11}}
    solution.conflicts = [[[0, set()], [2, {10, 32}], [0, set()], [3, {3, 8, 30}], [3, {1, 23, 25}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {7, 29}], [4, {0, 2, 22, 24}], [2, {9, 31}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {27}], [0, set()], [4, {8, 12, 30, 34}], [3, {1, 5, 23}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [3, {7, 29, 33}], [3, {0, 4, 22}], [0, set()], [1, {26}], [0, set()], [1, {11}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [3, {10, 28, 32}], [0, set()], [3, {3, 13, 35}], [1, {25}], [1, {6}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {28}], [2, {2, 24}], [4, {9, 13, 31, 35}], [0, set()], [1, {6}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {27, 33}], [1, {4}], [2, {12, 34}], [2, {5, 26}], [0, set()], [1, {11}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [4, {15, 17, 37, 39}], [1, {3}], [3, {1, 23, 25}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {16}], [7, {0, 2, 14, 22, 24, 36, 38}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {19, 27}], [3, {15, 37, 41}], [0, set()], [3, {1, 5, 23}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [7, {0, 4, 14, 18, 22, 36, 40}], [0, set()], [1, {26}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {28}], [4, {17, 20, 39, 42}], [1, {3}], [1, {25}], [1, {6}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {16, 28}], [5, {2, 20, 24, 38, 42}], [0, set()], [0, set()], [1, {6}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {19, 27}], [4, {4, 18, 40, 41}], [0, set()], [2, {5, 26}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {10, 32}], [0, set()], [4, {8, 21, 30, 43}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {7, 29}], [0, set()], [4, {9, 21, 31, 43}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [0, set()], [6, {8, 12, 21, 30, 34, 43}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [3, {7, 29, 33}], [0, set()], [2, {21, 43}], [0, set()], [0, set()], [1, {11}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {10, 32}], [0, set()], [4, {13, 21, 35, 43}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [0, set()], [6, {9, 13, 21, 31, 35, 43}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {33}], [0, set()], [4, {12, 21, 34, 43}], [0, set()], [0, set()], [1, {11}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {16, 19}], [12, {14, 15, 17, 18, 20, 36, 37, 38, 39, 40, 41, 42}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [3, {10, 52, 54}], [0, set()], [3, {3, 8, 47}], [1, {1}], [1, {45}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {7, 51}], [4, {0, 2, 44, 46}], [2, {9, 53}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {52}], [0, set()], [3, {8, 12, 56}], [2, {1, 5}], [2, {45, 49}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {7, 51}], [4, {0, 4, 44, 48}], [1, {55}], [0, set()], [0, set()], [1, {11}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {10, 54}], [1, {50}], [4, {3, 13, 47, 57}], [0, set()], [1, {6}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [3, {2, 46, 50}], [4, {9, 13, 53, 57}], [0, set()], [1, {6}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [2, {4, 48}], [3, {12, 55, 56}], [1, {5}], [1, {49}], [1, {11}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [4, {15, 17, 59, 61}], [2, {3, 47}], [1, {1}], [1, {45}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {16, 60}], [6, {0, 2, 14, 44, 46, 58}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {19, 63}], [2, {15, 59}], [0, set()], [2, {1, 5}], [2, {45, 49}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [8, {0, 4, 14, 18, 44, 48, 58, 62}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [5, {17, 20, 50, 61, 64}], [2, {3, 47}], [0, set()], [1, {6}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {16, 60}], [5, {2, 20, 46, 50, 64}], [0, set()], [0, set()], [1, {6}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {19, 63}], [4, {4, 18, 48, 62}], [0, set()], [1, {5}], [1, {49}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [4, {10, 52, 54, 65}], [0, set()], [2, {8, 21}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [3, {7, 51, 65}], [0, set()], [3, {9, 21, 53}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {52, 65}], [0, set()], [4, {8, 12, 21, 56}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [3, {7, 51, 65}], [0, set()], [2, {21, 55}], [0, set()], [0, set()], [1, {11}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [3, {10, 54, 65}], [0, set()], [3, {13, 21, 57}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {65}], [0, set()], [5, {9, 13, 21, 53, 57}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {65}], [0, set()], [4, {12, 21, 55, 56}], [0, set()], [0, set()], [1, {11}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [4, {16, 19, 60, 63}], [10, {14, 15, 17, 18, 20, 58, 59, 61, 62, 64}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {32}], [0, set()], [1, {30}], [3, {23, 25, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {29}], [2, {22, 24}], [1, {31}], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {27}], [0, set()], [2, {30, 34}], [2, {23, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {29, 33}], [1, {22}], [0, set()], [2, {26, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {28, 32}], [0, set()], [1, {35}], [2, {25, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {28}], [1, {24}], [2, {31, 35}], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {27, 33}], [0, set()], [1, {34}], [2, {26, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [2, {37, 39}], [0, set()], [3, {23, 25, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [4, {22, 24, 36, 38}], [0, set()], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {27}], [2, {37, 41}], [0, set()], [2, {23, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [3, {22, 36, 40}], [0, set()], [2, {26, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {28}], [2, {39, 42}], [0, set()], [2, {25, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {28}], [3, {24, 38, 42}], [0, set()], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {27}], [2, {40, 41}], [0, set()], [2, {26, 66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {32}], [0, set()], [2, {30, 43}], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {29}], [0, set()], [2, {31, 43}], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [0, set()], [3, {30, 34, 43}], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [2, {29, 33}], [0, set()], [1, {43}], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {32}], [0, set()], [2, {35, 43}], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [0, set()], [3, {31, 35, 43}], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [1, {33}], [0, set()], [2, {34, 43}], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [0, set()], [7, {36, 37, 38, 39, 40, 41, 42}], [0, set()], [1, {66}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]], [[0, set()], [6, {51, 52, 54, 60, 63, 65}], [9, {44, 46, 48, 50, 58, 59, 61, 62, 64}], [5, {47, 53, 55, 56, 57}], [0, set()], [2, {45, 49}], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()], [0, set()]]]
    solution.vertex_colours = {0: 2, 1: 4, 2: 2, 3: 3, 4: 2, 5: 4, 6: 5, 7: 1, 8: 3, 9: 3, 10: 1, 11: 6, 12: 3, 13: 3, 14: 2, 15: 2, 16: 1, 17: 2, 18: 2, 19: 1, 20: 2, 21: 3, 22: 2, 23: 4, 24: 2, 25: 4, 26: 4, 27: 1, 28: 1, 29: 1, 30: 3, 31: 3, 32: 1, 33: 1, 34: 3, 35: 3, 36: 2, 37: 2, 38: 2, 39: 2, 40: 2, 41: 2, 42: 2, 43: 3, 44: 2, 45: 5, 46: 2, 47: 3, 48: 2, 49: 5, 50: 2, 51: 1, 52: 1, 53: 3, 54: 1, 55: 3, 56: 3, 57: 3, 58: 2, 59: 2, 60: 1, 61: 2, 62: 2, 63: 1, 64: 2, 65: 1, 66: 4}

    conflicts = defaultdict(lambda: defaultdict(lambda: [0, set()]))

    # Convert from the list-of-lists into the defaultdict
    for vertex, color_list in enumerate(solution.conflicts):
        for color_class, (count, conflict_set) in enumerate(color_list):
            if count != 0 or conflict_set:
                conflicts[vertex][color_class] = [count, set(conflict_set)]

    solution.conflicts = conflicts

    return solution

def build_conflict_matrix(solution: Solution):
    conflicts = defaultdict(lambda: defaultdict(lambda: [0, set()]))

    for vertex in range(solution.problem.vertex_count):
        vertex_colour = solution.vertex_colours[vertex]
        if vertex_colour != 0:
            for neighbour in solution.problem.adjacency_list[vertex]:
                conflicts[neighbour][vertex_colour][0] += 1
                conflicts[neighbour][vertex_colour][1].add(vertex)

    return conflicts


def get_solution_with_hole_at_end(problem: Problem):
    solution = get_complete_solution(problem)

    vertex = 3
    old_colour = solution.vertex_colours[vertex]
    move_1 = Move(move_type=Move_type.DESTRUCTION_MOVE, vertex=vertex,
                  old_colour=old_colour)

    # Apply 1-exchange move
    solution._destruction_move(move_1)

    vertex = 5
    old_colour = solution.vertex_colours[vertex]
    move_2 = Move(move_type=Move_type.DESTRUCTION_MOVE, vertex=vertex,
                  old_colour=old_colour)

    # Apply 1-exchange move
    solution._destruction_move(move_2)

    vertex = 7
    old_colour = solution.vertex_colours[vertex]
    move_3 = Move(move_type=Move_type.DESTRUCTION_MOVE, vertex=vertex,
                  old_colour=old_colour)

    # Apply 1-exchange move
    solution._destruction_move(move_3)

    return solution


class TestSolution(unittest.TestCase):
    def assert_conflict_matrix(self, solution):
        conflicts2 = build_conflict_matrix(solution)
        self.assertEqual(set(solution.conflicts.keys()), set(conflicts2.keys()), "Vertex sets differ")

        for vertex in solution.conflicts:
            colors1 = solution.conflicts[vertex]
            colors2 = conflicts2[vertex]

            self.assertEqual(set(colors1.keys()), set(colors2.keys()), f"Color classes differ for vertex {vertex}")

            for color in colors1:
                count1, set1 = colors1[color]
                count2, set2 = colors2[color]

                self.assertEqual(count1, count2, f"Conflict count mismatch at vertex {vertex}, color {color}")
                self.assertEqual(set1, set2, f"Conflict set mismatch at vertex {vertex}, color {color}")


        for vertex, color_map in solution.conflicts.items():
            for color_class, (count, conflicting_vertices) in color_map.items():
                self.assertEqual(len(conflicting_vertices), count)
                self.assertLess(-1, count)

    def setUp(self):
        # Create problem and base solution
        self.edge_list = [(0,1), (0,2), (0,7),
                          (1,2), (1,4),
                          (2,3),
                          (3,4),
                          (3,7),
                          (4,6),
                          (5,6),
                          (6,7)
                          ]

        self.problem = Problem(8, self.edge_list)
        self.solution = self.problem.empty_solution()

    def test_copy_is_deep(self):
        edge_list = [(0, 1), (1, 2), (3, 4)]  # 0-indexed edges
        self.problem = Problem(5, edge_list)
        self.solution = self.problem.empty_solution()
        self.solution = self.solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=1))
        self.solution = self.solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=2))
        copy_sol = self.solution.copy_solution()

        # They should not be the same object
        self.assertIsNot(copy_sol, self.solution)

        # Top-level containers should be different objects
        self.assertIsNot(copy_sol.colour_classes, self.solution.colour_classes)
        self.assertIsNot(copy_sol.vertex_colours, self.solution.vertex_colours)
        self.assertIsNot(copy_sol.conflicts, self.solution.conflicts)

        # Internal elements should also be deep-copied
        for i in copy_sol.colour_classes.keys():
            print(i)
            self.assertIsNot(copy_sol.colour_classes[i], self.solution.colour_classes[i])

        # Changing copy should not affect solution
        copy_sol.colour_classes[1].add(4)
        self.assertNotEqual(copy_sol.colour_classes[1], self.solution.colour_classes[1])

        # Check problem is same (reference is OK here)
        self.assertIs(copy_sol.problem, self.solution.problem)

    def test_move_generators_are_independent(self):
        edge_list = [(0, 1), (1, 2), (3, 4)]  # 0-indexed edges
        self.problem = Problem(5, edge_list)
        self.solution = self.problem.empty_solution()
        self.solution = self.solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=1))
        self.solution = self.solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=2))
        copy_sol = self.solution.copy_solution()

        # These are iterators, but we want to ensure they don't share state
        # So we extract the first element and check if they’re not synced
        solution_next = next(self.solution.local_move_generator, None)
        copy_next = next(copy_sol.local_move_generator, None)

        # They should either be different or independently constructed
        self.assertNotEqual(solution_next, copy_next)


    def test_construction_move_with_empty_solution(self):
        solution = self.problem.empty_solution()
        self.assert_conflict_matrix(solution)

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=1)

        old_conflicts = deepcopy(solution.conflicts)

        solution = solution.apply(move)

        # Check colour class
        self.assertIn(0, solution.colour_classes[1])

        # Check vertex_colours
        self.assertEqual(solution.vertex_colours[0], 1)

        # Check conflicts
        self.assert_conflict_matrix(solution)

    def test_construction_move_with_partial_solution(self):
        solution = get_partial_solution(self.problem)
        self.assert_conflict_matrix(solution)

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=7, new_colour=3)

        old_conflicts = deepcopy(solution.conflicts)

        # Apply the move
        solution = solution.apply(move)

        # Check vertex is added to the correct class
        self.assertIn(move.vertex, solution.colour_classes[move.new_colour])
        self.assertEqual(solution.vertex_colours[move.vertex], move.new_colour)

        # Check conflicts
        self.assert_conflict_matrix(solution)

    def test_construction_move_new_colour_class(self):
        solution = get_partial_solution(self.problem)
        self.assert_conflict_matrix(solution)

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=7, new_colour=4)

        old_conflicts = deepcopy(solution.conflicts)

        # Apply the move
        solution = solution.apply(move)

        # Check vertex is added to the correct class
        self.assertIn(move.vertex, solution.colour_classes[move.new_colour])
        self.assertEqual(solution.vertex_colours[move.vertex], move.new_colour)

        # Check conflicts
        self.assert_conflict_matrix(solution)

    def test_conflict_destruction_and_construction_moves_real(self):
        problem = Problem(67,
                          [(0, 1), (0, 3), (0, 8), (0, 10), (0, 23), (0, 25), (0, 30), (0, 32), (1, 2), (1, 7), (1, 9),
                           (1, 22), (1, 24), (1, 29), (1, 31), (2, 5), (2, 8), (2, 12), (2, 23), (2, 27), (2, 30),
                           (2, 34), (3, 4), (3, 7), (3, 11), (3, 22), (3, 26), (3, 29), (3, 33), (4, 6), (4, 10),
                           (4, 13), (4, 25), (4, 28), (4, 32), (4, 35), (5, 6), (5, 9), (5, 13), (5, 24), (5, 28),
                           (5, 31), (5, 35), (6, 11), (6, 12), (6, 26), (6, 27), (6, 33), (6, 34), (7, 15), (7, 17),
                           (7, 23), (7, 25), (7, 37), (7, 39), (8, 14), (8, 16), (8, 22), (8, 24), (8, 36), (8, 38),
                           (9, 15), (9, 19), (9, 23), (9, 27), (9, 37), (9, 41), (10, 14), (10, 18), (10, 22), (10, 26),
                           (10, 36), (10, 40), (11, 17), (11, 20), (11, 25), (11, 28), (11, 39), (11, 42), (12, 16),
                           (12, 20), (12, 24), (12, 28), (12, 38), (12, 42), (13, 18), (13, 19), (13, 26), (13, 27),
                           (13, 40), (13, 41), (14, 21), (14, 30), (14, 32), (14, 43), (15, 21), (15, 29), (15, 31),
                           (15, 43), (16, 21), (16, 30), (16, 34), (16, 43), (17, 21), (17, 29), (17, 33), (17, 43),
                           (18, 21), (18, 32), (18, 35), (18, 43), (19, 21), (19, 31), (19, 35), (19, 43), (20, 21),
                           (20, 33), (20, 34), (20, 43), (21, 36), (21, 37), (21, 38), (21, 39), (21, 40), (21, 41),
                           (21, 42), (22, 45), (22, 47), (22, 52), (22, 54), (23, 44), (23, 46), (23, 51), (23, 53),
                           (24, 45), (24, 49), (24, 52), (24, 56), (25, 44), (25, 48), (25, 51), (25, 55), (26, 47),
                           (26, 50), (26, 54), (26, 57), (27, 46), (27, 50), (27, 53), (27, 57), (28, 48), (28, 49),
                           (28, 55), (28, 56), (29, 45), (29, 47), (29, 59), (29, 61), (30, 44), (30, 46), (30, 58),
                           (30, 60), (31, 45), (31, 49), (31, 59), (31, 63), (32, 44), (32, 48), (32, 58), (32, 62),
                           (33, 47), (33, 50), (33, 61), (33, 64), (34, 46), (34, 50), (34, 60), (34, 64), (35, 48),
                           (35, 49), (35, 62), (35, 63), (36, 52), (36, 54), (36, 65), (37, 51), (37, 53), (37, 65),
                           (38, 52), (38, 56), (38, 65), (39, 51), (39, 55), (39, 65), (40, 54), (40, 57), (40, 65),
                           (41, 53), (41, 57), (41, 65), (42, 55), (42, 56), (42, 65), (43, 58), (43, 59), (43, 60),
                           (43, 61), (43, 62), (43, 63), (43, 64), (44, 66), (45, 66), (46, 66), (47, 66), (48, 66),
                           (49, 66), (50, 66), (51, 66), (52, 66), (53, 66), (54, 66), (55, 66), (56, 66), (57, 66),
                           (58, 66), (59, 66), (60, 66), (61, 66), (62, 66), (63, 66), (64, 66), (65, 66)])

        solution = get_real_solution(problem)
        # Check conflicts
        self.assert_conflict_matrix(solution)
        for _ in range(10):
            move = random_move(destruction_neighbourhood(problem), solution)
            solution = apply(move, solution)
            self.assert_conflict_matrix(solution)
        while True:
            construction_move = random_move(construction_neighbourhood(problem), solution)
            if construction_move:
                solution = apply(construction_move, solution)
                self.assert_conflict_matrix(solution)
            else:
                break




    def test_destruction_move(self):
        solution = get_complete_solution(self.problem)
        self.assert_conflict_matrix(solution)

        vertex = 3
        old_colour = solution.vertex_colours[vertex]
        move = Move(move_type=Move_type.DESTRUCTION_MOVE, vertex=vertex, old_colour=old_colour)

        old_conflicts = deepcopy(solution.conflicts)

        # Track whether _swap will be triggered
        will_trigger_swap = len(solution.colour_classes[old_colour]) == 1

        # Spy on _swap
        solution._swap = MagicMock()

        # Apply destruction move
        solution = solution.apply(move)

        # Check vertex removed from colour class
        self.assertNotIn(vertex, solution.colour_classes.get(old_colour, set()))

        # Check vertex_colours reset to 0
        self.assertEqual(solution.vertex_colours[vertex], 0)

        # Check conflicts
        self.assert_conflict_matrix(solution)

        # If this was the last vertex in that colour class, _swap should be triggered
        if will_trigger_swap:
            solution._swap.assert_called_once_with(old_colour)
        else:
            solution._swap.assert_not_called()

    def test_destruction_move_that_will_empty_colour_class(self):
        solution = get_partial_solution(self.problem)
        self.assert_conflict_matrix(solution)


        vertex = 3
        old_colour = solution.vertex_colours[vertex]
        move_1 = Move(move_type=Move_type.DESTRUCTION_MOVE, vertex=vertex, old_colour=old_colour)

        # Apply destruction move
        solution = solution.apply(move_1)

        old_conflicts = deepcopy(solution.conflicts)

        vertex = 5
        old_colour = solution.vertex_colours[vertex]
        move_2 = Move(move_type=Move_type.DESTRUCTION_MOVE, vertex=vertex, old_colour=old_colour)

        # Track whether _swap will be triggered
        will_trigger_swap = len(solution.colour_classes[old_colour]) == 1

        # Spy on _swap
        solution._swap = MagicMock()

        # Apply destruction move
        solution = solution.apply(move_2)

        # Check vertex removed from colour class
        self.assertNotIn(vertex, solution.colour_classes.get(old_colour, set()))

        # Check vertex_colours reset to 0
        self.assertEqual(solution.vertex_colours[vertex], 0)

        # Check conflicts
        self.assert_conflict_matrix(solution)


        # If this was the last vertex in that colour class, _swap should be triggered
        if will_trigger_swap:
            solution._swap.assert_called_once_with(old_colour)
        else:
            solution._swap.assert_not_called()

    def test_one_exchange(self):
        solution = get_complete_solution(self.problem)
        old_conflicts = deepcopy(solution.conflicts)
        self.assert_conflict_matrix(solution)

        old_move_generator_id = id(solution.local_move_generator)

        vertex = 2
        old_colour = solution.vertex_colours[vertex]
        new_colour = 3

        move = Move(move_type=Move_type.ONE_EXCHANGE, vertex=vertex,
                    old_colour=old_colour, new_colour=new_colour)

        # Determine if _swap should be triggered
        will_trigger_swap = len(solution.colour_classes[old_colour]) == 1

        # Spy on _swap
        solution._swap = MagicMock()

        # Apply 1-exchange move
        solution = solution.apply(move)

        new_move_generator_id = id(solution.local_move_generator)
        self.assertNotEqual(old_move_generator_id, new_move_generator_id)

        # Check vertex has moved colour classes
        self.assertNotIn(vertex, solution.colour_classes.get(old_colour, set()))
        self.assertIn(vertex, solution.colour_classes[new_colour])
        self.assertEqual(solution.vertex_colours[vertex], new_colour)

        # Check conflicts
        self.assert_conflict_matrix(solution)


        # Check _swap call
        if will_trigger_swap:
            solution._swap.assert_called_once_with(old_colour)
        else:
            solution._swap.assert_not_called()

    def test_one_exchange_new_colour_class(self):
        solution = get_complete_solution(self.problem)
        old_conflicts = deepcopy(solution.conflicts)
        self.assert_conflict_matrix(solution)


        vertex = 2
        old_colour = solution.vertex_colours[vertex]
        new_colour = 4

        move = Move(move_type=Move_type.ONE_EXCHANGE, vertex=vertex,
                    old_colour=old_colour, new_colour=new_colour)

        # Determine if _swap should be triggered
        will_trigger_swap = len(solution.colour_classes[old_colour]) == 1

        # Spy on _swap
        solution._swap = MagicMock()

        # Apply 1-exchange move
        solution = solution.apply(move)

        # Check vertex has moved colour classes
        self.assertNotIn(vertex, solution.colour_classes.get(old_colour, set()))
        self.assertIn(vertex, solution.colour_classes[new_colour])
        self.assertEqual(solution.vertex_colours[vertex], new_colour)

        # Check conflicts
        self.assert_conflict_matrix(solution)


        # Check _swap call
        if will_trigger_swap:
            solution._swap.assert_called_once_with(old_colour)
        else:
            solution._swap.assert_not_called()

    def test_one_exchange_that_will_empty_colour_class(self):
        solution = get_solution_with_hole_at_end(self.problem)
        self.assert_conflict_matrix(solution)


        vertex = 1
        old_colour = solution.vertex_colours[vertex]
        new_colour = 3

        move_1 = Move(move_type=Move_type.ONE_EXCHANGE, vertex=vertex,
                    old_colour=old_colour, new_colour=new_colour)

        # Apply 1-exchange move
        solution = solution.apply(move_1)

        self.assert_conflict_matrix(solution)


        vertex = 4
        old_colour = solution.vertex_colours[vertex]
        new_colour = 3

        move_2 = Move(move_type=Move_type.ONE_EXCHANGE, vertex=vertex,
                    old_colour=old_colour, new_colour=new_colour)

        # Determine if _swap should be triggered
        will_trigger_swap = len(solution.colour_classes[old_colour]) == 1

        # Spy on _swap
        solution._swap = MagicMock()

        old_conflicts = deepcopy(solution.conflicts)

        # Apply 1-exchange move
        solution = solution.apply(move_2)

        # Check vertex has moved colour classes
        self.assertNotIn(vertex, solution.colour_classes.get(old_colour, set()))
        self.assertIn(vertex, solution.colour_classes[new_colour])
        self.assertEqual(solution.vertex_colours[vertex], new_colour)

        # Check conflicts
        self.assert_conflict_matrix(solution)


        # Check _swap call
        if will_trigger_swap:
            solution._swap.assert_called_once_with(old_colour)
        else:
            solution._swap.assert_not_called()

    def test_swap_with_hole_at_end(self):
        solution = get_solution_with_hole_at_end(self.problem)
        old_conflicts = deepcopy(solution.conflicts)
        self.assert_conflict_matrix(solution)


        solution._reset_move_generator = MagicMock()

        solution._swap(3)

        # Should remove the colour 3
        self.assertNotIn(3, solution.colour_classes)

        solution._reset_move_generator.assert_called_once()

        # Check conflicts
        self.assert_conflict_matrix(solution)
        for v in range(solution.problem.vertex_count):
            for colour in solution.colour_classes.keys():
                self.assertEqual(solution.conflicts[v][colour], old_conflicts[v][colour])
            self.assertEqual(solution.conflicts[v][3], [0, set()])


    def test_swap_with_hole_in_middle(self):
        solution = get_solution_with_hole_in_middle(self.problem)
        self.assert_conflict_matrix(solution)

        # Empty colour_class
        solution_colour_1_vertices = solution.colour_classes[2]
        self.assertFalse(solution_colour_1_vertices)

        # colour_class to move
        solution_colour_3_vertices = solution.colour_classes[3]

        solution._reset_move_generator = MagicMock()

        solution._swap(2)

        # Colour 1 should now hold what was previously in colour 3
        self.assertEqual(solution.colour_classes[2], solution_colour_3_vertices)

        # Should remove the colour 3
        self.assertNotIn(3, solution.colour_classes)

        # Check conflicts
        self.assert_conflict_matrix(solution)

        solution._reset_move_generator.assert_called_once()

    def test_objective_value(self):
        solution = get_complete_solution(self.problem)

        pre_move_expected_objective = -6 # from manual calculation
        objective_value = solution.objective_value()
        self.assertEqual(pre_move_expected_objective, objective_value)

        move = Move(move_type=Move_type.ONE_EXCHANGE, vertex=6, new_colour=3, old_colour=1)
        solution = solution.apply(move)
        objective_value = solution.objective_value()

        post_move_expected_objective = 8 # from manual calculation
        self.assertEqual(post_move_expected_objective, objective_value)

    def test_one_exchange_move_generator(self):
        problem: Problem = Problem(67,
                                   [(0, 1), (0, 3), (0, 8), (0, 10), (0, 23), (0, 25), (0, 30), (0, 32), (1, 2), (1, 7),
                                    (1, 9), (1, 22), (1, 24), (1, 29), (1, 31), (2, 5), (2, 8), (2, 12), (2, 23),
                                    (2, 27), (2, 30), (2, 34), (3, 4), (3, 7), (3, 11), (3, 22), (3, 26), (3, 29),
                                    (3, 33), (4, 6), (4, 10), (4, 13), (4, 25), (4, 28), (4, 32), (4, 35), (5, 6),
                                    (5, 9), (5, 13), (5, 24), (5, 28), (5, 31), (5, 35), (6, 11), (6, 12), (6, 26),
                                    (6, 27), (6, 33), (6, 34), (7, 15), (7, 17), (7, 23), (7, 25), (7, 37), (7, 39),
                                    (8, 14), (8, 16), (8, 22), (8, 24), (8, 36), (8, 38), (9, 15), (9, 19), (9, 23),
                                    (9, 27), (9, 37), (9, 41), (10, 14), (10, 18), (10, 22), (10, 26), (10, 36),
                                    (10, 40), (11, 17), (11, 20), (11, 25), (11, 28), (11, 39), (11, 42), (12, 16),
                                    (12, 20), (12, 24), (12, 28), (12, 38), (12, 42), (13, 18), (13, 19), (13, 26),
                                    (13, 27), (13, 40), (13, 41), (14, 21), (14, 30), (14, 32), (14, 43), (15, 21),
                                    (15, 29), (15, 31), (15, 43), (16, 21), (16, 30), (16, 34), (16, 43), (17, 21),
                                    (17, 29), (17, 33), (17, 43), (18, 21), (18, 32), (18, 35), (18, 43), (19, 21),
                                    (19, 31), (19, 35), (19, 43), (20, 21), (20, 33), (20, 34), (20, 43), (21, 36),
                                    (21, 37), (21, 38), (21, 39), (21, 40), (21, 41), (21, 42), (22, 45), (22, 47),
                                    (22, 52), (22, 54), (23, 44), (23, 46), (23, 51), (23, 53), (24, 45), (24, 49),
                                    (24, 52), (24, 56), (25, 44), (25, 48), (25, 51), (25, 55), (26, 47), (26, 50),
                                    (26, 54), (26, 57), (27, 46), (27, 50), (27, 53), (27, 57), (28, 48), (28, 49),
                                    (28, 55), (28, 56), (29, 45), (29, 47), (29, 59), (29, 61), (30, 44), (30, 46),
                                    (30, 58), (30, 60), (31, 45), (31, 49), (31, 59), (31, 63), (32, 44), (32, 48),
                                    (32, 58), (32, 62), (33, 47), (33, 50), (33, 61), (33, 64), (34, 46), (34, 50),
                                    (34, 60), (34, 64), (35, 48), (35, 49), (35, 62), (35, 63), (36, 52), (36, 54),
                                    (36, 65), (37, 51), (37, 53), (37, 65), (38, 52), (38, 56), (38, 65), (39, 51),
                                    (39, 55), (39, 65), (40, 54), (40, 57), (40, 65), (41, 53), (41, 57), (41, 65),
                                    (42, 55), (42, 56), (42, 65), (43, 58), (43, 59), (43, 60), (43, 61), (43, 62),
                                    (43, 63), (43, 64), (44, 66), (45, 66), (46, 66), (47, 66), (48, 66), (49, 66),
                                    (50, 66), (51, 66), (52, 66), (53, 66), (54, 66), (55, 66), (56, 66), (57, 66),
                                    (58, 66), (59, 66), (60, 66), (61, 66), (62, 66), (63, 66), (64, 66), (65, 66)])
        solution = problem.empty_solution()
        moves = [Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=57, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=52, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=36, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=23, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=63, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=51, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=33, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=38, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=27, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=6, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=26, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=13, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=54, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=22, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=41, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=46, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=42, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=56, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=60, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=19, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=43, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=30, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=45, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=39, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=4, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=5, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=18, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=65, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=34, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=9, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=58, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=14, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=20, new_colour=4, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=40, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=59, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=66, new_colour=4, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=15, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=12, new_colour=5, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=29, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=62, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=17, new_colour=4, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=3, new_colour=4, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=24, new_colour=4, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=10, new_colour=4, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=31, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=7, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=55, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=44, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=49, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=53, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=48, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=32, new_colour=4, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=8, new_colour=5, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=47, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=25, new_colour=4, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=61, new_colour=5, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=50, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=2, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=35, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=11, new_colour=2, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=28, new_colour=4, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=37, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=16, new_colour=1, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=21, new_colour=3, old_colour=None),
                 Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=64, new_colour=5, old_colour=None),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=62, new_colour=2, old_colour=1),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=33, new_colour=2, old_colour=1),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=20, new_colour=1, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=64, new_colour=1, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=50, new_colour=1, old_colour=3),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=61, new_colour=1, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=47, new_colour=1, old_colour=3),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=3, new_colour=1, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=6, new_colour=1, old_colour=3),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=62, new_colour=1, old_colour=2),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=17, new_colour=1, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=12, new_colour=6, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=8, new_colour=6, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=12, new_colour=3, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=2, new_colour=4, old_colour=3),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=8, new_colour=3, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=0, new_colour=5, old_colour=3),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=10, new_colour=3, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=0, new_colour=6, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=0, new_colour=2, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=30, new_colour=5, old_colour=2),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=44, new_colour=2, old_colour=3),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=32, new_colour=3, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=25, new_colour=3, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=30, new_colour=6, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=30, new_colour=3, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=5, old_colour=3),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=6, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=4, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=66, new_colour=5, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=66, new_colour=6, old_colour=5),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=28, new_colour=5, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=24, new_colour=5, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=2, new_colour=5, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=6, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=3, old_colour=4),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=1, old_colour=3),
                 Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=4, old_colour=1)]
        construction_moves = [move for move in moves if move.move_type == Move_type.CONSTRUCTION_MOVE]
        one_exchange_moves = [move for move in moves if move.move_type == Move_type.ONE_EXCHANGE]
        for construction_move in construction_moves:
            solution = apply(construction_move, solution)

        solution._reset_move_generator()
        called_first = 0
        neighborhood = local_neighbourhood(problem)
        while random_moves_without_replacement(neighborhood, solution):
            called_first += 1

        solution.apply(Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=2, old_colour=5),)
        called_second = 0
        while random_moves_without_replacement(neighborhood, solution):
            called_second += 1
        self.assertEqual(called_first, called_second)

        for one_exchange_move in one_exchange_moves[:len(one_exchange_moves)//2]:
            solution = apply(one_exchange_move, solution)
        called_third = 0

        while random_moves_without_replacement(neighborhood, solution):
            called_third += 1
        self.assertEqual(called_first, called_third)

    def test_ojective_incr_real(self):
        problem: Problem = Problem(67, [(0, 1), (0, 3), (0, 8), (0, 10), (0, 23), (0, 25), (0, 30), (0, 32), (1, 2), (1, 7), (1, 9), (1, 22), (1, 24), (1, 29), (1, 31), (2, 5), (2, 8), (2, 12), (2, 23), (2, 27), (2, 30), (2, 34), (3, 4), (3, 7), (3, 11), (3, 22), (3, 26), (3, 29), (3, 33), (4, 6), (4, 10), (4, 13), (4, 25), (4, 28), (4, 32), (4, 35), (5, 6), (5, 9), (5, 13), (5, 24), (5, 28), (5, 31), (5, 35), (6, 11), (6, 12), (6, 26), (6, 27), (6, 33), (6, 34), (7, 15), (7, 17), (7, 23), (7, 25), (7, 37), (7, 39), (8, 14), (8, 16), (8, 22), (8, 24), (8, 36), (8, 38), (9, 15), (9, 19), (9, 23), (9, 27), (9, 37), (9, 41), (10, 14), (10, 18), (10, 22), (10, 26), (10, 36), (10, 40), (11, 17), (11, 20), (11, 25), (11, 28), (11, 39), (11, 42), (12, 16), (12, 20), (12, 24), (12, 28), (12, 38), (12, 42), (13, 18), (13, 19), (13, 26), (13, 27), (13, 40), (13, 41), (14, 21), (14, 30), (14, 32), (14, 43), (15, 21), (15, 29), (15, 31), (15, 43), (16, 21), (16, 30), (16, 34), (16, 43), (17, 21), (17, 29), (17, 33), (17, 43), (18, 21), (18, 32), (18, 35), (18, 43), (19, 21), (19, 31), (19, 35), (19, 43), (20, 21), (20, 33), (20, 34), (20, 43), (21, 36), (21, 37), (21, 38), (21, 39), (21, 40), (21, 41), (21, 42), (22, 45), (22, 47), (22, 52), (22, 54), (23, 44), (23, 46), (23, 51), (23, 53), (24, 45), (24, 49), (24, 52), (24, 56), (25, 44), (25, 48), (25, 51), (25, 55), (26, 47), (26, 50), (26, 54), (26, 57), (27, 46), (27, 50), (27, 53), (27, 57), (28, 48), (28, 49), (28, 55), (28, 56), (29, 45), (29, 47), (29, 59), (29, 61), (30, 44), (30, 46), (30, 58), (30, 60), (31, 45), (31, 49), (31, 59), (31, 63), (32, 44), (32, 48), (32, 58), (32, 62), (33, 47), (33, 50), (33, 61), (33, 64), (34, 46), (34, 50), (34, 60), (34, 64), (35, 48), (35, 49), (35, 62), (35, 63), (36, 52), (36, 54), (36, 65), (37, 51), (37, 53), (37, 65), (38, 52), (38, 56), (38, 65), (39, 51), (39, 55), (39, 65), (40, 54), (40, 57), (40, 65), (41, 53), (41, 57), (41, 65), (42, 55), (42, 56), (42, 65), (43, 58), (43, 59), (43, 60), (43, 61), (43, 62), (43, 63), (43, 64), (44, 66), (45, 66), (46, 66), (47, 66), (48, 66), (49, 66), (50, 66), (51, 66), (52, 66), (53, 66), (54, 66), (55, 66), (56, 66), (57, 66), (58, 66), (59, 66), (60, 66), (61, 66), (62, 66), (63, 66), (64, 66), (65, 66)])
        solution = problem.empty_solution()
        moves = [Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=57, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=52, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=36, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=23, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=63, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=51, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=33, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=38, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=27, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=6, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=26, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=13, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=54, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=22, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=41, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=46, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=42, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=56, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=60, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=19, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=43, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=30, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=45, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=39, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=4, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=5, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=18, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=65, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=34, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=9, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=58, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=14, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=20, new_colour=4, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=40, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=59, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=66, new_colour=4, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=15, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=12, new_colour=5, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=29, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=62, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=17, new_colour=4, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=3, new_colour=4, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=24, new_colour=4, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=10, new_colour=4, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=31, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=7, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=55, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=44, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=49, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=53, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=48, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=32, new_colour=4, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=8, new_colour=5, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=47, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=25, new_colour=4, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=61, new_colour=5, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=50, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=2, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=35, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=11, new_colour=2, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=28, new_colour=4, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=37, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=16, new_colour=1, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=21, new_colour=3, old_colour=None), Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=64, new_colour=5, old_colour=None), Move(move_type=Move_type.ONE_EXCHANGE, vertex=62, new_colour=2, old_colour=1), Move(move_type=Move_type.ONE_EXCHANGE, vertex=33, new_colour=2, old_colour=1), Move(move_type=Move_type.ONE_EXCHANGE, vertex=20, new_colour=1, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=64, new_colour=1, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=50, new_colour=1, old_colour=3), Move(move_type=Move_type.ONE_EXCHANGE, vertex=61, new_colour=1, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=47, new_colour=1, old_colour=3), Move(move_type=Move_type.ONE_EXCHANGE, vertex=3, new_colour=1, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=6, new_colour=1, old_colour=3), Move(move_type=Move_type.ONE_EXCHANGE, vertex=62, new_colour=1, old_colour=2), Move(move_type=Move_type.ONE_EXCHANGE, vertex=17, new_colour=1, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=12, new_colour=6, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=8, new_colour=6, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=12, new_colour=3, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=2, new_colour=4, old_colour=3), Move(move_type=Move_type.ONE_EXCHANGE, vertex=8, new_colour=3, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=0, new_colour=5, old_colour=3), Move(move_type=Move_type.ONE_EXCHANGE, vertex=10, new_colour=3, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=0, new_colour=6, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=0, new_colour=2, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=30, new_colour=5, old_colour=2), Move(move_type=Move_type.ONE_EXCHANGE, vertex=44, new_colour=2, old_colour=3), Move(move_type=Move_type.ONE_EXCHANGE, vertex=32, new_colour=3, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=25, new_colour=3, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=30, new_colour=6, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=30, new_colour=3, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=5, old_colour=3), Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=6, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=4, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=66, new_colour=5, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=66, new_colour=6, old_colour=5), Move(move_type=Move_type.ONE_EXCHANGE, vertex=28, new_colour=5, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=24, new_colour=5, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=2, new_colour=5, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=6, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=3, old_colour=4), Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=1, old_colour=3), Move(move_type=Move_type.ONE_EXCHANGE, vertex=46, new_colour=4, old_colour=1)]
        construction_moves = [move for move in moves if move.move_type == Move_type.CONSTRUCTION_MOVE]
        one_exchange_moves = [move for move in moves if move.move_type == Move_type.ONE_EXCHANGE]
        for construction_move in construction_moves:
            solution = apply(construction_move, solution)

        pre_move_solution = solution.copy_solution()
        for one_exchange_move in one_exchange_moves:
            pre_move_eval = solution.objective_value()
            increment_eval = solution.objective_value_increment(one_exchange_move)
            solution = solution.apply(one_exchange_move)
            post_move_eval = solution.objective_value()
            expected_increment_eval = post_move_eval - pre_move_eval
            pre_move_solution = pre_move_solution.apply(one_exchange_move)
            self.assertEqual(expected_increment_eval, increment_eval)


    def test_objective_value_increment_move_to_nonempty_colour_class(self):
        solution = get_complete_solution(self.problem)

        pre_move_expected_objective = -6  # from manual calculation
        self.assertEqual(solution.objective_value(), pre_move_expected_objective)

        move = Move(move_type=Move_type.ONE_EXCHANGE, vertex=6, new_colour=3, old_colour=1)

        increment = solution.objective_value_increment(move)

        solution = solution.apply(move)

        post_move_expected_objective = 8  # from manual calculation
        self.assertEqual(solution.objective_value(), post_move_expected_objective)

        expected = post_move_expected_objective - pre_move_expected_objective
        self.assertEqual(expected, increment)

    def test_objective_value_increment_move_to_empty_colour_class(self):
        solution = get_complete_solution(self.problem)

        pre_move_expected_objective = -6  # from manual calculation
        self.assertEqual(solution.objective_value(), pre_move_expected_objective)

        # Move vertex 6 moves from colour class 1 to colour class 3
        move = Move(move_type=Move_type.ONE_EXCHANGE, vertex=6, new_colour=4, old_colour=1)

        increment = solution.objective_value_increment(move)

        solution = solution.apply(move)

        post_move_expected_objective = -4  # from manual calculation
        self.assertEqual(solution.objective_value(), post_move_expected_objective)

        expected = post_move_expected_objective - pre_move_expected_objective
        self.assertEqual(expected, increment)


    def test_lower_bound_empty(self):
        solution = self.problem.empty_solution()

        pre_move_expected_objective = -64  # from manual calculation
        lower_bound = solution.lower_bound()
        self.assertEqual(pre_move_expected_objective, lower_bound)

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=1)
        solution = solution.apply(move)
        lower_bound = solution.lower_bound()

        post_move_expected_objective = -64  # from manual calculation
        self.assertEqual(post_move_expected_objective, lower_bound)


    def test_lower_bound_partial_sol_with_conflict(self):
        solution = self.problem.empty_solution()

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=1)
        solution = solution.apply(move)

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=1)
        solution = solution.apply(move)

        pre_move_expected_objective = -60  # from manual calculation
        lower_bound = solution.lower_bound()
        self.assertEqual(pre_move_expected_objective, lower_bound)

    def test_lower_bound_partial_sol_no_conflict(self):
        solution = self.problem.empty_solution()

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=1)
        solution = solution.apply(move)

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=2)
        solution = solution.apply(move)

        pre_move_expected_objective = -50  # from manual calculation
        lower_bound = solution.lower_bound()
        self.assertEqual(pre_move_expected_objective, lower_bound)


    def test_lower_bound_increment_empty(self):
        solution = self.problem.empty_solution()

        pre_move_lower_bound = solution.lower_bound()
        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=1)
        increment = solution.lower_bound_increment(move)

        solution = solution.apply(move)

        post_move_lower_bound = solution.lower_bound()
        self.assertEqual(post_move_lower_bound-pre_move_lower_bound, increment)


    def test_lower_bound_increment_partial_sol_with_conflict(self):
        solution = self.problem.empty_solution()

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=1)
        solution = solution.apply(move)
        pre_move_lower_bound = solution.lower_bound()

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=1)
        increment = solution.lower_bound_increment(move)
        solution = solution.apply(move)
        post_move_lower_bound = solution.lower_bound()

        self.assertEqual(post_move_lower_bound-pre_move_lower_bound, increment)

    def test_lower_bound_increment_partial_sol_no_conflict(self):
        solution = self.problem.empty_solution()

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=0, new_colour=1)
        solution = solution.apply(move)
        pre_move_lower_bound = solution.lower_bound()

        move = Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=1, new_colour=2)
        increment = solution.lower_bound_increment(move)

        solution = solution.apply(move)
        post_move_lower_bound = solution.lower_bound()

        self.assertEqual(post_move_lower_bound-pre_move_lower_bound, increment)


class TestConstructionNeighbourhood(unittest.TestCase):
    def assert_conflicts_len_match(self, conflict_matrix):
        for conflicts in conflict_matrix:
            for conflict in conflicts:
                self.assertEqual(conflict[0], len(conflict[1]))

    def assert_conflict_matrix(self, solution):
        
        self.assertEqual(build_conflict_matrix(solution), solution.conflicts)
        for row in solution.conflicts:
            for conflict in row:
                self.assertLess(-1, conflict[0])


    def setUp(self):
        edge_list = [(0, 1), (1, 2), (3, 4)]  # 0-indexed edges
        self.problem = Problem(5, edge_list)

        self.solution = self.problem.empty_solution()

        self.solution = self.solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=2, new_colour=1))
        self.solution = self.solution.apply(Move(move_type=Move_type.CONSTRUCTION_MOVE, vertex=3, new_colour=2))

        self.neighbourhood = construction_neighbourhood(self.problem)

    def test_moves_generates_expected_moves(self):
        moves = self.neighbourhood.moves(self.solution)
        expected_vertices = [0, 1, 4]
        expected_colours = range(1, 4)  # 2 used colours + 1

        for move in moves:
            self.assertEqual(move.move_type, Move_type.CONSTRUCTION_MOVE)
            self.assertIn(move.vertex, expected_vertices)
            self.assertIn(move.new_colour, expected_colours)
            self.solution.apply(move)
            self.assert_conflict_matrix(self.solution)

    def test_random_move_returns_valid_move(self):
        expected_vertices = [0, 1, 4]
        expected_colours = range(1, 4)
        for _ in range(9):
            move = self.neighbourhood.random_move(self.solution)
            self.assertEqual(move.move_type, Move_type.CONSTRUCTION_MOVE)
            self.assertIn(move.vertex, expected_vertices)
            self.assertIn(move.new_colour, expected_colours)
            self.assert_conflict_matrix(self.solution)

    def test_random_move_returns_none_if_no_unassigned(self):
        # All vertices assigned
        self.solution.vertex_colours = {1: 1, 2: 2, 3: 1, 4: 2, 5: 2}
        move = self.neighbourhood.random_move(self.solution)
        self.assertIsNone(move)

    def test_random_moves_without_replacement_returns_valid_move(self):
        # Create a generator that yields a valid move
        self.solution.vertex_colours = {1: 0, 2: 1}
        self.solution.construction_move_generator = iter([(1, 1), (2, 2)])

        move = self.neighbourhood.random_moves_without_replacement(self.solution)
        self.assertIsNotNone(move)
        self.assertEqual(move.vertex, 1)
        self.assertEqual(move.new_colour, 1)

    def test_random_moves_without_replacement_returns_none_on_exhaustion(self):
        self.solution.vertex_colours = {1: 1, 2: 2}
        self.solution.construction_move_generator = iter([])

        move = self.neighbourhood.random_moves_without_replacement(self.solution)
        self.assertIsNone(move)



if __name__ == '__main__':
    unittest.main()